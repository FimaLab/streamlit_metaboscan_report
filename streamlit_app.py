import streamlit as st
import os
import tempfile
import pandas as pd
from datetime import datetime
import time
import requests
import numpy as np
import time
from functools import wraps
import json

# Add timing decorator
def time_function(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        execution_time = end_time - start_time
        # Safe session state access
        if 'timing_data' not in st.session_state:
            st.session_state.timing_data = {}
        st.session_state.timing_data[func.__name__] = execution_time
        return result
    return wrapper

DASH_APP_URL = "https://metaboreport-test-rezvanov.amvera.io/"

def initialize_session_state():
    """Initialize all session state variables safely"""
    default_state = {
        'processed_data': None,
        'pdf_data': None,
        'pdf_filename': None,
        'dash_checked': False,
        'timing_data': {},
        'session_id': None,
        'doctor_message': "",
        'patient_message': "",
        'patient_long_message': "",
        'form_submitted': False
    }
    
    for key, value in default_state.items():
        if key not in st.session_state:
            st.session_state[key] = value

@time_function
def clean_data_for_json(data):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –Ω–µ-JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    if isinstance(data, (np.floating, float)):
        if pd.isna(data) or np.isnan(data):
            return None
        elif np.isinf(data):
            return float('inf') if data > 0 else float('-inf')
        else:
            return float(data)
    elif isinstance(data, (np.integer, int)):
        return int(data)
    elif isinstance(data, (np.bool_, bool)):
        return bool(data)
    elif isinstance(data, (str, type(None))):
        return data
    elif isinstance(data, (list, tuple)):
        return [clean_data_for_json(item) for item in data]
    elif isinstance(data, dict):
        return {key: clean_data_for_json(value) for key, value in data.items()}
    elif isinstance(data, pd.DataFrame):
        return clean_data_for_json(data.to_dict('records'))
    elif isinstance(data, pd.Series):
        return clean_data_for_json(data.to_dict())
    else:
        try:
            return str(data)
        except:
            return None

@time_function
def dataframe_to_dict(df):
    """Convert DataFrame to JSON-serializable dict"""
    if df is None:
        return None
    return {
        'columns': list(df.columns),
        'data': clean_data_for_json(df.values.tolist()),
        'index': clean_data_for_json(df.index.tolist())
    }

@time_function
def update_dash_data(patient_info, data_dict):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Dash —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º session_id"""
    try:
        # Prepare the data payload with DataFrames as serializable dicts
        payload = {
            'name': patient_info['name'],
            'age': patient_info['age'],
            'date': patient_info['date'],
            'gender': patient_info['gender'],
            'layout': patient_info['layout'],
            'metabolomic_data': dataframe_to_dict(data_dict['metabolomic_data'])
        }

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        for key in ['doctor_message', 'patient_message', 'patient_long_message']:
            if key in patient_info:
                payload[key] = patient_info[key]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        current_session_id = st.session_state.get('session_id')
        if current_session_id:
            url = f"{DASH_APP_URL}/update_data/{current_session_id}"
        else:
            url = f"{DASH_APP_URL}/update_data"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        response = requests.post(url, json=payload, timeout=90)

        if response.status_code == 200:
            response_data = response.json()
            session_id = response_data.get('session_id')
            if session_id:
                st.session_state.session_id = session_id
            return True, "Data updated successfully", session_id
        else:
            try:
                error_data = response.json()
                error_msg = error_data.get('message', f'HTTP Error {response.status_code}')
            except (ValueError, TypeError):
                error_msg = response.text.strip() or f'HTTP Error {response.status_code}'
            return False, error_msg, None

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        return False, error_msg, None

@time_function
def validate_inputs(name, file1):
    """Validate user inputs before processing"""
    if not name or not name.strip():
        st.error("Please enter a valid patient name")
        return False
    if file1 is None:
        st.error("Please upload metabolomic data file")
        return False
    return True

@time_function
def download_pdf_from_dash(session_id):
    """–ó–∞–≥—Ä—É–∑–∫–∞ PDF –∏–∑ Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º session_id"""
    try:
        response = requests.get(
            f"{DASH_APP_URL}/download_pdf/{session_id}",
            timeout=90,
        )

        if response.status_code == 200:
            pdf_data = response.content
            content_disposition = response.headers.get('Content-Disposition', '')
            filename = f"MetaboScan_Report.pdf"

            if 'filename*=' in content_disposition:
                filename_part = content_disposition.split('filename*=')[1]
                if 'UTF-8\'\'' in filename_part:
                    filename = filename_part.split('UTF-8\'\'')[1].strip('";')
                else:
                    filename = filename_part.strip('";')
            elif 'filename=' in content_disposition:
                filename = content_disposition.split('filename=')[1].strip('"')

            return True, pdf_data, filename
        else:
            try:
                error_data = response.json()
                error_msg = error_data.get('message', f'HTTP Error {response.status_code}')
            except (ValueError, TypeError):
                error_msg = response.text.strip() or f'HTTP Error {response.status_code}'
            return False, None, error_msg

    except Exception as e:
        return False, None, str(e)

@time_function
def check_dash_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        response = requests.get(f"{DASH_APP_URL}/health", timeout=30)
        return response.status_code == 200
    except:
        return False

@time_function
def generate_pdf_report_api(patient_info, data_dict):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ Dash API —Å session_id"""
    success, message, session_id = update_dash_data(patient_info, data_dict)

    if not success:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {message}")
        return None, None

    if not session_id:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å session_id –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
        return None, None

    st.session_state.session_id = session_id
    time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö

    with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞..."):
        success, pdf_data, result = download_pdf_from_dash(session_id)

        if success:
            return pdf_data, result
        else:
            st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {result}")
            return None, None

@time_function
def read_metabolomic_data(uploaded_file):
    """Read metabolomic data from uploaded file"""
    try:
        if uploaded_file.name.endswith('.xlsx') or uploaded_file.name.endswith('.xls'):
            return pd.read_excel(uploaded_file)
        else:
            st.error("Unsupported file format for metabolomic data")
            return None
    except Exception as e:
        st.error(f"Error reading metabolomic data: {str(e)}")
        return None

def display_timing_report():
    """Display timing analysis report"""
    if 'timing_data' in st.session_state and st.session_state.timing_data:
        timing_data = st.session_state.timing_data
        total_time = sum(timing_data.values())

        if total_time > 0:
            timing_df = pd.DataFrame({
                'Process': list(timing_data.keys()),
                'Time (seconds)': list(timing_data.values()),
                'Percentage': [f"{(time/total_time)*100:.1f}%" for time in timing_data.values()]
            }).sort_values('Time (seconds)', ascending=False)

            if not timing_df.empty:
                slowest_time = timing_df.iloc[0]['Time (seconds)']
                st.metric("–ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è", f"{slowest_time:.2f} —Å–µ–∫")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
    user_key = initialize_user_session()
    user_data = get_user_data(user_key)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    cleanup_inactive_sessions()
    
    st.set_page_config(
        page_title="–û—Ç—á–µ—Ç Metaboscan",
        page_icon="üè•",
        layout="wide",
        initial_sidebar_state="collapsed"
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ —Å–∞–π–¥–±–∞—Ä–µ
    with st.sidebar:
        st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
        st.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(st.session_state.get('multi_user_sessions', {}))}")
        
        if st.button("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Dash"):
            if check_dash_health():
                st.success("Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                set_user_data(user_key, {'dash_checked': True})
            else:
                st.error("Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if user_data.get('session_id'):
            st.info(f"Session ID: {user_data['session_id'][:8]}...")
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –º–æ—é —Å–µ—Å—Å–∏—é"):
            set_user_data(user_key, {
                'processed_data': None,
                'pdf_data': None,
                'pdf_filename': None,
                'session_id': None
            })
            st.rerun()

    # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with st.form("report_form", clear_on_submit=False):
        st.write("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ")

        cols = st.columns(4)
        with cols[0]:
            name = st.text_input("–ü–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û)", 
                               placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
                               key=f"name_{user_key}")  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
        with cols[1]:
            age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=0, max_value=120, 
                                value=47, key=f"age_{user_key}")
        with cols[2]:
            gender = st.selectbox("–ü–æ–ª", ("–ú", "–ñ"), 
                                index=0, key=f"gender_{user_key}")
        with cols[3]:
            date = st.date_input("–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞", datetime.now(), 
                               format="DD.MM.YYYY", key=f"date_{user_key}")

        layout = st.selectbox("–¢–∏–ø –æ—Ç—á–µ—Ç–∞", ("basic", "recommendation"), 
                            index=0, key=f"layout_{user_key}")

        st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
        metabolomic_data_file = st.file_uploader(
            "–ú–µ—Ç–∞–±–æ–ª–æ–º–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ (Excel)",
            type=["xlsx", "xls"],
            key=f"metabolomic_data_{user_key}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )

        enable_timing = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", 
                                  value=True, key=f"timing_{user_key}")

        submitted = st.form_submit_button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", type="primary")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if submitted:
        if validate_inputs(name, metabolomic_data_file):
            with st.spinner("üî¨ –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç..."):
                try:
                    # Read metabolomic data
                    metabolomic_data_df = read_metabolomic_data(metabolomic_data_file)
                    if metabolomic_data_df is None:
                        return

                    # Prepare data for current user
                    data_dict = {
                        "metabolomic_data": metabolomic_data_df,
                    }

                    patient_info = {
                        "name": name.strip(),
                        "age": age,
                        "date": date.strftime("%d.%m.%Y"),
                        "gender": gender,
                        "layout": layout
                    }

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    set_user_data(user_key, {
                        'processed_data': {
                            "patient_info": patient_info,
                            "data_dict": data_dict
                        },
                        'pdf_data': None,
                        'pdf_filename': None
                    })

                    if layout == "basic":
                        pdf_data, filename = generate_pdf_report_api(
                            patient_info,
                            data_dict
                        )

                        if pdf_data:
                            set_user_data(user_key, {
                                'pdf_data': pdf_data,
                                'pdf_filename': filename
                            })
                            st.success("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!")

                    elif layout == "recommendation":
                        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –Ω–∏–∂–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏")

                except Exception as e:
                    st.error(f"An error occurred: {str(e)}")

    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_pdf_data = user_data.get('pdf_data')
    current_filename = user_data.get('pdf_filename')
    
    if current_pdf_data:
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
            data=current_pdf_data,
            file_name=current_filename,
            mime="application/pdf",
            key=f"download_{user_key}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
        )

    # –§–æ—Ä–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    processed_data = user_data.get('processed_data')
    if (processed_data and 
        processed_data["patient_info"]["layout"] == "recommendation"):

        with st.form("recommendation_form"):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_patient_message = user_data.get('patient_message', '')
            current_patient_long_message = user_data.get('patient_long_message', '')
            current_doctor_message = user_data.get('doctor_message', '')
            
            patient_message = st.text_area(
                value=current_patient_message,
                key=f"patient_msg_{user_key}",
                height=150,
                max_chars=600,
                label="–¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤—ã–≤–æ–¥—ã –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞..."
            )
            
            patient_long_message = st.text_area(
                value=current_patient_long_message,
                key=f"patient_long_msg_{user_key}",
                height=150,
                max_chars=3000,
                label="–¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤—ã–≤–æ–¥—ã –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)..."
            )
            
            doctor_message = st.text_area(
                value=current_doctor_message,
                key=f"doctor_msg_{user_key}",
                height=150,
                max_chars=3000,
                label="–¢–µ–∫—Å—Ç –¥–ª—è –≤—Ä–∞—á–∞",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤—ã–≤–æ–¥—ã –¥–ª—è –≤—Ä–∞—á–∞..."
            )
            
            submitted_recommendation = st.form_submit_button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏", type="primary")

        if submitted_recommendation:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            set_user_data(user_key, {
                'patient_message': patient_message,
                'patient_long_message': patient_long_message,
                'doctor_message': doctor_message
            })
            
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏..."):
                patient_info_with_messages = processed_data["patient_info"].copy()
                patient_info_with_messages["doctor_message"] = doctor_message
                patient_info_with_messages["patient_message"] = patient_message
                patient_info_with_messages["patient_long_message"] = patient_long_message

                pdf_data, filename = generate_pdf_report_api(
                    patient_info_with_messages,
                    processed_data["data_dict"]
                )

                if pdf_data:
                    set_user_data(user_key, {
                        'pdf_data': pdf_data,
                        'pdf_filename': filename
                    })
                    st.success("‚úÖ –û—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!")
                else:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏")

    # Display timing report for current user
    if enable_timing and user_data.get('timing_data'):
        display_timing_report(user_data['timing_data'])

def display_timing_report(timing_data):
    """Display timing analysis report for specific user"""
    if timing_data:
        total_time = sum(timing_data.values())
        if total_time > 0:
            timing_df = pd.DataFrame({
                'Process': list(timing_data.keys()),
                'Time (seconds)': list(timing_data.values()),
                'Percentage': [f"{(time/total_time)*100:.1f}%" for time in timing_data.values()]
            }).sort_values('Time (seconds)', ascending=False)

            if not timing_df.empty:
                slowest_time = timing_df.iloc[0]['Time (seconds)']
                st.metric("–ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è", f"{slowest_time:.2f} —Å–µ–∫")

if __name__ == "__main__":
    main()
